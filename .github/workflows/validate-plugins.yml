name: Validate Plugin Schema

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:  # Allows manual triggering from GitHub UI

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  # Needed to post comments on PRs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for accurate PR comparison
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Validate plugin schemas
        id: schema-validation
        continue-on-error: true
        run: |
          echo "::group::Plugin Schema Validation"
          python scripts/validate-plugin-schema.py > /tmp/schema-results.txt 2>&1
          SCHEMA_EXIT=$?
          cat /tmp/schema-results.txt
          echo "exit_code=$SCHEMA_EXIT" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          exit $SCHEMA_EXIT
      
      - name: Validate marketplace sync
        id: sync-validation
        continue-on-error: true
        run: |
          echo "::group::Marketplace Sync Validation"
          python scripts/validate-marketplace-sync.py > /tmp/sync-results.txt 2>&1
          SYNC_EXIT=$?
          cat /tmp/sync-results.txt
          echo "exit_code=$SYNC_EXIT" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          exit $SYNC_EXIT
      
      - name: Find associated PR
        if: always() && github.event_name == 'push'
        id: find-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
            });
            
            if (prs.length > 0) {
              core.setOutput('pr_number', prs[0].number);
              console.log(`Found PR #${prs[0].number}`);
              return prs[0].number;
            } else {
              console.log('No open PR found for this branch');
              return '';
            }
      
      - name: Post PR Comment
        if: always() && (github.event_name == 'pull_request' || steps.find-pr.outputs.pr_number != '')
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const schemaExit = '${{ steps.schema-validation.outputs.exit_code }}';
            const syncExit = '${{ steps.sync-validation.outputs.exit_code }}';
            
            // Get PR number - either from PR event or from find-pr step
            const prNumber = context.issue.number || '${{ steps.find-pr.outputs.pr_number }}';
            
            if (!prNumber) {
              console.log('No PR number found, skipping comment');
              return;
            }
            
            let schemaResults = '';
            let syncResults = '';
            
            try {
              schemaResults = fs.readFileSync('/tmp/schema-results.txt', 'utf8');
            } catch (e) {
              schemaResults = 'Unable to read schema validation results';
            }
            
            try {
              syncResults = fs.readFileSync('/tmp/sync-results.txt', 'utf8');
            } catch (e) {
              syncResults = 'Unable to read sync validation results';
            }
            
            // Extract errors from results
            const schemaErrors = schemaResults.match(/‚ùå Errors \((\d+)\):/);
            const syncErrors = syncResults.match(/‚ùå Errors \((\d+)\):/);
            
            const schemaErrorCount = schemaErrors ? parseInt(schemaErrors[1]) : 0;
            const syncErrorCount = syncErrors ? parseInt(syncErrors[1]) : 0;
            const totalErrors = schemaErrorCount + syncErrorCount;
            
            let commentBody = '## üîç Plugin Validation Results\n\n';
            
            if (totalErrors === 0 && schemaExit === '0' && syncExit === '0') {
              commentBody += '### ‚úÖ All Checks Passed!\n\n';
              commentBody += 'Your plugin changes have been validated successfully.\n\n';
              commentBody += '- ‚úÖ Plugin schema validation passed\n';
              commentBody += '- ‚úÖ Marketplace sync validation passed\n';
            } else {
              commentBody += `### ‚ùå Validation Failed (${totalErrors} error${totalErrors !== 1 ? 's' : ''})\n\n`;
              
              if (schemaExit !== '0') {
                commentBody += '#### Plugin Schema Validation\n\n';
                const errorSection = schemaResults.match(/‚ùå Errors[^]*?(?=\n\n|$)/);
                if (errorSection) {
                  const errors = errorSection[0].split('\n').slice(1, 11); // Show first 10 errors
                  commentBody += '```\n' + errors.join('\n') + '\n';
                  if (schemaErrorCount > 10) {
                    commentBody += `... and ${schemaErrorCount - 10} more errors\n`;
                  }
                  commentBody += '```\n\n';
                }
              }
              
              if (syncExit !== '0') {
                commentBody += '#### Marketplace Sync Validation\n\n';
                const errorSection = syncResults.match(/‚ùå Errors[^]*?(?=\n\n|$)/);
                if (errorSection) {
                  commentBody += '```\n' + errorSection[0] + '\n```\n\n';
                }
              }
              
              commentBody += '#### üìù Next Steps\n\n';
              commentBody += '1. Click **Details** next to the failed check above to see full validation output\n';
              commentBody += '2. Fix the errors listed above\n';
              commentBody += '3. Push your changes - validation will run automatically\n\n';
              commentBody += 'üìö **Resources:**\n';
              commentBody += '- [Plugin Schema Documentation](../blob/main/PLUGIN_SCHEMA.md)\n';
              commentBody += '- [Required Checks Guide](../blob/main/REQUIRED_CHECKS.md)\n';
            }
            
            commentBody += '\n---\n';
            commentBody += '<sub>ü§ñ This comment is automatically generated by the validation workflow</sub>';
            
            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üîç Plugin Validation Results')
            );
            
            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
              console.log(`Updated comment ${botComment.id}`);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log(`Created new comment on PR #${prNumber}`);
            }
      
      - name: Check validation results
        if: always()
        run: |
          SCHEMA_EXIT="${{ steps.schema-validation.outputs.exit_code }}"
          SYNC_EXIT="${{ steps.sync-validation.outputs.exit_code }}"
          
          echo "Schema validation exit code: $SCHEMA_EXIT"
          echo "Sync validation exit code: $SYNC_EXIT"
          
          if [ "$SCHEMA_EXIT" != "0" ] || [ "$SYNC_EXIT" != "0" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ùå Validation Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the validation results above and fix the errors." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Validation failed! Please check the errors in the PR comment and workflow logs."
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚úÖ All Validations Passed!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ All validation checks passed successfully!"
          fi
